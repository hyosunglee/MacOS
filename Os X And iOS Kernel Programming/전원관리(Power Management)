10장은 **전원 관리(Power Management)**에 관한 내용으로, Mac OS X와 iOS의 드라이버에서 전원 상태를 관리하는 방법

---

### **전원 관리의 개요**

- 전원 관리는 모든 컴퓨팅 장치에서 중요한 기능입니다. Mac OS X를 실행하는 모든 플랫폼은 저전력 모드로 전환할 수 있습니다.
- 데스크톱, 랩탑, iPhone 같은 장치들은 모두 전원 관리 메커니즘을 활용하여 에너지를 절약합니다.
- 예: Mac Pro의 "슬립 모드"는 CPU를 중단 상태로 두고, 디스플레이를 끄며, 하드 드라이브를 멈춥니다.

---

### **I/O Kit의 전원 관리 모델**

- I/O Kit은 하드웨어 간의 전원 의존성을 **트리 구조(Power Plane)**로 모델링하여 관리합니다.
- **IOService** 클래스는 모든 드라이버의 기본 클래스로, 전원 관리 API를 제공합니다.
- **전원 상태 전환**:
    - 부모-자식 장치 간 동기화가 필수적입니다.
    - 부모 장치는 자식 장치가 저전력 상태로 전환되기 전까지 저전력 상태로 들어갈 수 없습니다.

---

### **전원 상태 정의**

- 드라이버는 전원 상태를 정의하는 **IOPMPowerState** 구조체를 사용합니다.
- 최소 두 가지 상태가 필요:
    - **OFF 상태**: 장치가 전원을 소모하지 않음.
    - **ON 상태**: 장치가 완전히 작동 가능한 상태.
- 추가로, 중간 전력 상태를 정의할 수 있습니다(예: LCD 디스플레이 백라이트 감소).

---

### **드라이버의 전원 관리**

- **전원 상태 변경 응답**:
    - 드라이버는 시스템의 슬립 또는 웨이크 이벤트를 처리하기 위해 전원 상태 변경 알림을 수신해야 합니다.
    - `setPowerState()` 메서드로 전원 상태 전환 요청을 처리합니다.
- **전원 상태 요청**:
    - 드라이버는 장치가 사용되지 않을 때 독립적으로 전원을 낮출 수 있습니다.
    - 예: 장치가 유휴 상태에서 일정 시간 후 전원을 낮추도록 타이머를 설정.

---

### **유휴 장치 관리**

- I/O Kit은 유휴 타이머 기능을 제공합니다:
    - **setIdleTimerPeriod()**: 타이머 설정.
    - **activityTickle()**: 장치가 마지막으로 사용된 시간을 갱신.
- 타이머가 만료되면, 장치는 자동으로 저전력 상태로 전환됩니다.

---

### **드라이버 구현 예제**

- 간단한 드라이버는 OFF, ON 상태와 두 가지 저전력 상태를 정의합니다.
- `start()` 메서드에서 전원 관리를 초기화하며, 유휴 상태에서 전원 상태를 낮춥니다.
- `myReadDataFromDevice()` 메서드로 하드웨어가 사용 가능한 상태인지 확인 후 작업을 수행합니다.

---

이 장에서는 Mac OS X와 iOS의 드라이버가 전원 상태를 효율적으로 관리하고, 

- **시스템 이벤트에 응답하는 방법**
    
    시스템 이벤트에 응답하는 방법은 드라이버가 시스템의 전원 관리 흐름에 적응하여, 슬립(Sleep)이나 웨이크(Wake) 같은 상태 전환 이벤트에 적절히 반응하는 것을 의미합니다. 이는 I/O Kit의 전원 관리 메커니즘을 통해 이루어지며, 다음과 같은 주요 단계로 구성
    
    ---
    
    ### **1. 시스템 전원 이벤트와 드라이버의 역할**
    
    - **슬립 이벤트(Sleep Event)**: 시스템이 슬립 상태로 들어가기 전에, 드라이버는 하드웨어 장치를 안전한 상태로 전환하거나 작업을 중단해야 합니다.
    - **웨이크 이벤트(Wake Event)**: 시스템이 다시 활성화되면, 드라이버는 장치를 초기화하고 작업을 재개합니다.
    
    ---
    
    ### **2. `setPowerState()` 메서드**
    
    - I/O Kit의 `setPowerState()` 메서드는 드라이버가 시스템 전원 상태 전환 요청을 처리하도록 설계되었습니다.
    - **호출 흐름**:
        1. 시스템 또는 부모 장치가 전원 상태 변경을 요청합니다.
        2. I/O Kit이 드라이버의 `setPowerState()` 메서드를 호출합니다.
        3. 드라이버는 요청된 상태에 따라 작업을 수행합니다.
    
    ### **예: `setPowerState()` 메서드 구현**
    
    ```cpp
    IOReturn MyDriver::setPowerState(unsigned long state, IOService *whatDevice) {
        if (state == ON_STATE) {
            // 장치가 ON 상태로 전환될 때 초기화 코드
            initializeHardware();
        } else if (state == OFF_STATE) {
            // 장치가 OFF 상태로 전환될 때 종료 코드
            shutdownHardware();
        }
        return IOPMAckImplied;
    }
    
    ```
    
    - `ON_STATE`와 `OFF_STATE`는 드라이버에서 정의한 전원 상태를 나타냅니다.
    - `IOPMAckImplied`는 전환 작업이 완료되었음을 시스템에 알립니다.
    
    ---
    
    ### **3. 슬립(Sleep)과 웨이크(Wake) 처리**
    
    - **슬립 처리**:
        - I/O Kit은 시스템이 슬립 상태로 전환되기 전에 드라이버의 `setPowerState()` 메서드를 호출합니다.
        - 드라이버는 데이터를 저장하거나 하드웨어를 안전한 상태로 전환합니다.
    - **웨이크 처리**:
        - 시스템이 깨어날 때 I/O Kit이 드라이버를 다시 호출하여 장치를 초기화하도록 요청합니다.
    
    ---
    
    ### **4. 유휴 타이머와 이벤트 알림**
    
    - **유휴 상태 관리**:
        - 드라이버는 유휴 상태 타이머를 사용하여 일정 시간 동안 장치가 사용되지 않을 경우 저전력 상태로 전환합니다.
        - 타이머가 만료되기 전 장치가 사용되면 `activityTickle()` 메서드를 호출하여 타이머를 초기화합니다.
    - **이벤트 알림**:
        - I/O Kit은 전원 이벤트 발생 시 드라이버에 알림을 전달합니다.
        - 드라이버는 적절한 핸들러를 구현하여 이를 처리합니다.
    
    ---
    
    ### **5. 전원 상태 전환의 흐름**
    
    - 전원 상태 전환은 **부모-자식 관계**에 따라 트리 구조로 진행됩니다.
        1. 시스템이 슬립 상태로 전환될 때, I/O Kit은 먼저 부모 장치의 전원 상태를 낮춥니다.
        2. 부모 장치가 안전하게 상태를 변경하면, 자식 장치가 동일한 과정을 따릅니다.
        3. 웨이크 이벤트에서는 이 과정이 역순으로 진행됩니다.
    
    ---
    
    이와 같은 전원 관리 이벤트 처리는 드라이버의 안정성과 에너지 효율성을 높이는 데 중요한 역할